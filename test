import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'connectedCell' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY matrix as parameter.
     */
   public static String biggerIsGreater(String w) {
    // Write your code here
        
        char[] charsInW = w.toCharArray();
        int lastCharIndex = charsInW.length-1;
        int indexFound = 0;
        boolean found = false;
        for(int i = lastCharIndex; i > 0; i--) {
            for(int j = i-1; j >= 0; j--) {
                //System.out.println("---------------i-----------" + i + "**" + charsInW[i] );
                //System.out.println("--------j------------------" + j + "**" + charsInW[j] );
                if(charsInW[i] > charsInW[ j]) {
                   
                    char temp = charsInW[i];
                    charsInW[i] = charsInW[j];
                    charsInW[j] = temp;
                    if(i > j) {
                        indexFound = j; 
                    } else {
                        indexFound = i; 
                    }
                    found = true;
                    //  System.out.println("-------Replace--- " + indexFound);
                    i = 0;
                    j=-1;
                    break;
                }
            }
        }
        if(!found) {
            return "no answer";
        }
        String perfectX = String.valueOf(charsInW);
        String perfect = perfectX.substring(0, indexFound+1);
        String toArrange = perfectX.substring(indexFound+1);
        char[] toArrangeChars = toArrange.toCharArray();
        Arrays.sort(toArrangeChars);
        String rest =String.valueOf(toArrangeChars);
       // System.out.println("------------1--------------");
       // System.out.println(perfect);
       // System.out.println(rest);
       // System.out.println("------------2--------------");
       
        return perfect+rest;

    }
}

 class Node {
    private int row;
    private int column;
    public Node(int row, int column) {
        this.row = row;
        this.column = column;
    }
    
    public int getRow() {
        return this.row;
    }
    public int getColumn(){
        return this.column;
    }
    
    public boolean equals(Node n) {
        return this.row == n.row && this.column == n.column;
    }
    
    public int hashCode() {
        return 1000*row + 2000*column;       
    }
    
    public String toString() {
        return "row:" + row + ",column:" + column;
    }
    
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        int m = Integer.parseInt(bufferedReader.readLine().trim());

        List<List<Integer>> matrix = new ArrayList<>();

        IntStream.range(0, n).forEach(i -> {
            try {
                matrix.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int result = Result.connectedCell(matrix);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
